{"name":"Cameo","tagline":"cameo - computer assisted metabolic engineering & optimization","body":"## Cameo—Computer Aided Metabolic Engineering and Optimization\r\n\r\n[![Documentation Status](https://readthedocs.org/projects/cameo/badge/?version=devel)](https://readthedocs.org/projects/cameo/?badge=devel)\r\n[![Build Status](https://travis-ci.org/biosustain/cameo.svg?branch=devel)](https://travis-ci.org/biosustain/cameo)\r\n[![Coverage Status](https://coveralls.io/repos/biosustain/cameo/badge.svg?branch=devel)](https://coveralls.io/r/biosustain/cameo?branch=devel)\r\n[![DOI](https://zenodo.org/badge/doi/10.5281/zenodo.19827.svg)](http://dx.doi.org/10.5281/zenodo.19827)\r\n\r\n\r\n### What is Cameo?\r\n**Cameo** is a high-level python library developed to aid the strain design process in metabolic engineering projects. The library provides a modular framework of simulation methods, strain design methods, access to models, that targets developers that want  custom analysis workflows. \r\n\r\nComputationally heavy methods have been parallelized and can be run on a clusters using the IPython parallelization framework (see example and documentation for more details). The default fallback is python's multiprocessing library.\r\n\r\nFurthermore, it exposes a high-level API to users that just want to compute promising strain designs. \r\n\r\nYou got curious? Head over to [try.cameo.bio](http://try.cameo.bio) and give it a try.\r\n\r\n### Installation\r\nUse pip to install Cameo from [PyPI](https://pypi.python.org/pypi/cameo) (we recommend doing this inside a [virtual environment](http://docs.python-guide.org/en/latest/dev/virtualenvs/)).\r\n\r\n    pip install cameo\r\n\r\nWe highly recommend updating `pip` beforehand (`pip install pip --upgrade`).\r\n\r\nIn case you downloaded the source code, run\r\n\r\n\tpip install -e .  # recommended\r\n\r\nwhile you are in the top level directory. You might need to run these commands with administrative privileges if you're not using a virtual environment (using `sudo` for example).\r\n\r\n\r\n### Examples\r\n\r\nA number of examples are available as static ([nbviewer.ipython.org](http://nbviewer.ipython.org/github/biosustain/cameo-notebooks/tree/master/)) or executable Jupyter (née IPython) notebooks ([try.cameo.bio](http://try.cameo.bio)).\r\n\r\n#### High-level API (for users)\r\nCompute strain engineering strategies for a desired product in a number of host organisms using the high-level interface.\r\n\r\n\tfrom cameo.api import design\r\n\tdesign(product='L-Serine')\r\n\r\n[Output](http://nbviewer.ipython.org/github/biosustain/cameo-notebooks/blob/master/8-high-level-API.ipynb)\r\n\r\n#### Low-level API (for developers)\r\n\r\nFind gene knockout targets using evolutionary computation.\r\n\r\n\tfrom cameo import models\r\n\tfrom cameo.strain_design.heuristic import GeneKnockoutOptimization\r\n\tfrom cameo.strain_design.heuristic.objective_functions import biomass_product_coupled_yield\r\n\t\r\n\tmodel = models.bigg.e_coli_core\r\n\tobj = biomass_product_coupled_yield(\r\n\t    model.reactions.Biomass_Ecoli_core_w_GAM,\r\n\t    model.reactions.EX_succ_e,\r\n\t    model.reactions.EX_glc_e)\r\n\tko = GeneKnockoutOptimization(model=model, objective_function=obj)\r\n\tko.run(max_evaluations=50000, n=1, mutation_rate=0.15, indel_rate=0.185)\r\n\r\n[Output](http://nbviewer.ipython.org/github/biosustain/cameo-notebooks/blob/master/6-predict-gene-knockout-strategies.ipynb)\r\n\r\nPredict heterologous pathways for a desired chemical.\r\n\r\n\tfrom cameo.strain_design import pathway_prediction\r\n\tpredictor = pathway_prediction.PathwayPredictor(model)\r\n\tpathways = predictor.run(product=\"vanillin\")\r\n\r\n[Output](http://nbviewer.ipython.org/github/biosustain/cameo-notebooks/blob/master/7-predict-heterologous-pathways.ipynb)\r\n\r\n\r\n### Dependencies\r\nThis library depends on:\r\n\r\n- [cobrapy](https://github.com/opencobra/cobrapy) for constraint-based modeling\r\n- [optlang](https://github.com/biosustain/optlang) for heuristic optimization and mathematical programming\r\n\r\nFurthermore, the following dependencies are needed: \r\n\r\n- [numpy](http://www.numpy.org/) and [scipy](http://www.scipy.org/) for obvious reasons.\r\n- [IPython](http://ipython.org/) is needed for parallel computations and notebook interface.\r\n- [bokeh](http://bokeh.pydata.org/) is needed for reporting progress and plotting in the IPython notebook interface.\r\n- [pandas](http://pandas.pydata.org/) is needed because most functions returns results as pandas DataFrames.\r\n- [inspyred](https://pypi.python.org/pypi/inspyred) for evolutionary computations.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}